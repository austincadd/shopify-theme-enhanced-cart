{% comment %}
  Single-page navigation header
{% endcomment %}

<link rel="stylesheet"
      href="{{ 'component-list-menu.css' | asset_url }}"
      media="print"
      onload="this.media='all'">
<link rel="stylesheet"
      href="{{ 'component-search.css' | asset_url }}"
      media="print"
      onload="this.media='all'">
<link rel="stylesheet"
      href="{{ 'component-menu-drawer.css' | asset_url }}"
      media="print"
      onload="this.media='all'">

<style>
  .single-page-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background: rgba(7, 7, 18, 0.85);
    backdrop-filter: blur(25px);
    padding: 1rem 0;
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  }

  .single-page-header.scrolled {
    background: rgba(0, 0, 0, 0.95);
    backdrop-filter: blur(30px);
    padding: 0.5rem 0;
    border-bottom: 1px solid rgba(102, 255, 204, 0.2);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    transform: translateY(0);
  }

  .single-page-header.scrolled .header__heading-logo {
    height: 60px;
    filter: brightness(1.2) drop-shadow(0 0 15px rgba(102, 255, 204, 0.6));
  }

  .single-page-header.scrolled .h2 {
    font-size: 1.2rem;
  }

  .single-page-header.scrolled .single-page-nav a {
    font-size: 0.9rem;
    padding: 0.4rem 0.8rem;
  }

  .single-page-header .page-width {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    min-height: 60px;
  }

  .single-page-header .header__heading {
    flex-shrink: 0;
    background: none;
    border: none;
    padding: 0;
    margin: 0;
  }

  .single-page-header .header__heading-link {
    text-decoration: none;
    display: flex;
    align-items: center;
    position: relative;
    background: none;
    border: none;
    padding: 0;
    margin: 0;
  }

  .single-page-header .header__heading-logo {
    height: 80px;
    width: auto;
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    filter: brightness(1.3) drop-shadow(0 0 25px rgba(102, 255, 204, 0.6));
    background: none;
    border: none;
    padding: 0;
    margin: 0;
    object-fit: contain;
    animation: logoGlow 3s ease-in-out infinite alternate;
  }

  @keyframes logoGlow {
    0% {
      filter: brightness(1.3) drop-shadow(0 0 25px rgba(102, 255, 204, 0.6));
    }
    100% {
      filter: brightness(1.5) drop-shadow(0 0 35px rgba(102, 255, 204, 0.8));
    }
  }

  .single-page-header .h2 {
    color: var(--text-primary);
    font-size: 1.4rem;
    font-weight: 600;
    margin: 0;
    letter-spacing: 1px;
    text-transform: uppercase;
    transition: all 0.3s ease;
    font-family: 'Space Grotesk', sans-serif;
  }

  .single-page-nav {
    display: flex;
    gap: 1.5rem;
    list-style: none;
    margin: 0;
    padding: 0;
    align-items: center;
  }

  .single-page-nav a {
    text-decoration: none;
    color: var(--text-secondary);
    font-weight: 500;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    position: relative;
    padding: 0.5rem 1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-family: 'Space Grotesk', sans-serif;
  }

  .single-page-nav a:hover {
    color: var(--accent-blue);
  }

  .single-page-nav a::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--accent-blue);
    transition: width 0.3s ease;
  }

  .single-page-nav a:hover::after {
    width: 100%;
  }


  .header-right {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  /* Hide separate account and cart icons since they're now in the navigation menu */
  .header__icon--account,
  .header__icon--cart {
    display: none !important;
  }

  /* Account Dropdown Styling */
  .nav-dropdown {
    position: relative;
    display: inline-block;
  }

  .nav-dropdown-toggle {
    text-decoration: none;
    color: var(--text-secondary);
    font-weight: 500;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    position: relative;
    padding: 0.5rem 1rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-family: 'Space Grotesk', sans-serif;
    cursor: pointer;
  }

  .nav-dropdown-toggle:hover {
    color: var(--accent-blue);
  }

  .nav-dropdown-toggle::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--accent-blue);
    transition: width 0.3s ease;
  }

  .nav-dropdown-toggle:hover::after {
    width: 100%;
  }

  .nav-dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    background: rgba(0, 0, 0, 0.95);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 0.5rem 0;
    min-width: 160px;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    z-index: 1000;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .nav-dropdown:hover .nav-dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .nav-dropdown-menu a {
    display: block;
    padding: 0.75rem 1rem;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.3s ease;
    text-transform: none;
    letter-spacing: 0;
  }

  .nav-dropdown-menu a:hover {
    color: var(--accent-blue);
    background: rgba(102, 255, 204, 0.1);
  }

  .header-actions {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 1rem;
  }

  .header-action-link {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    text-decoration: none;
    color: var(--text-secondary);
    font-weight: 500;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    position: relative;
    padding: 0.5rem 0;
  }

  .header-action-link::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background: var(--accent-blue);
    transition: width 0.3s ease;
  }

  .header-action-link:hover {
    color: var(--accent-blue);
  }

  .header-action-link:hover::after {
    width: 100%;
  }

  .header-action-link svg {
    width: 16px;
    height: 16px;
    transition: all 0.3s ease;
  }

  .header-action-link:hover svg {
    transform: scale(1.05);
  }

  .action-text {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.3px;
  }

  .cart-count {
    display: none;
  }

  .mobile-nav-toggle {
    display: none;
    background: none;
    border: none;
    cursor: pointer;
    color: #ffffff;
    padding: 0.5rem;
    transition: all 0.3s ease;
    position: relative;
    width: 24px;
    height: 24px;
  }

  .mobile-nav-toggle span {
    display: block;
    width: 20px;
    height: 1px;
    background: #ffffff;
    margin: 4px 0;
    transition: all 0.3s ease;
  }

  .mobile-nav-toggle:hover span {
    background: #66ffcc;
  }

  .mobile-nav-toggle.active span:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
  }

  .mobile-nav-toggle.active span:nth-child(2) {
    opacity: 0;
  }

  .mobile-nav-toggle.active span:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
  }

  @media (max-width: 990px) {
    .single-page-header .page-width {
      padding: 0 2rem;
    }

    .single-page-nav {
      display: none;
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.95);
      backdrop-filter: blur(20px);
      flex-direction: column;
      padding: 3rem 2rem;
      gap: 2rem;
      border: none;
    }

    .single-page-nav.active {
      display: flex;
    }

    .mobile-nav-toggle {
      display: block;
    }

    .single-page-nav a {
      font-size: 1.2rem;
      text-align: center;
      width: 100%;
      padding: 1.5rem 0;
      font-weight: 600;
      text-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
    }

    .single-page-nav a::before {
      display: none;
    }

    /* Mobile dropdown styling */
    .nav-dropdown-menu {
      position: static;
      opacity: 1;
      visibility: visible;
      transform: none;
      background: transparent;
      border: none;
      box-shadow: none;
      padding: 0;
      margin-top: 0.5rem;
    }

    .nav-dropdown-menu a {
      padding: 1rem 0;
      font-size: 1rem;
      text-align: center;
      border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .header-actions {
      gap: 0.75rem;
    }

    .header-action-link {
      padding: 0.35rem 0.5rem;
    }

    .header-action-link svg {
      width: 14px;
      height: 14px;
    }

    .action-text {
      display: none;
    }
  }

  /* Ultra minimal scroll indicator */
  .scroll-indicator {
    position: fixed;
    top: 50%;
    right: 2rem;
    transform: translateY(-50%);
    z-index: 999;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .scroll-indicator a {
    width: 4px;
    height: 4px;
    background: rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    transition: all 0.3s ease;
    text-decoration: none;
  }

  .scroll-indicator a.active,
  .scroll-indicator a:hover {
    background: #66ffcc;
    transform: scale(1.5);
  }

  @media (max-width: 768px) {
    .scroll-indicator {
      display: none;
    }
    
    .header-right {
      gap: 1rem;
    }
    
    .header-actions {
      gap: 0.8rem;
    }
    
    .header-action-link {
      padding: 0.4rem 0;
      font-size: 0.8rem;
    }
    
    .header-action-link svg {
      width: 14px;
      height: 14px;
    }
  }
</style>

<header class="single-page-header">
  <div class="page-width">
    <div class="header__heading">
      <a href="{{ routes.root_url }}" class="header__heading-link">
        {%- if settings.logo != blank -%}
          <img src="{{ settings.logo | image_url: width: 500 }}"
               alt="{{ shop.name | escape }}"
               class="header__heading-logo"
               width="500"
               height="auto">
        {%- else -%}
          <span class="h2">{{ shop.name }}</span>
        {%- endif -%}
      </a>
    </div>

    <div class="header-right">
      <nav class="single-page-nav" id="nav-menu">
        <a href="{{ routes.root_url }}#shop" class="nav-link" data-section="shop">Sample Packs</a>
        <a href="{{ routes.root_url }}#newsletter" class="nav-link" data-section="newsletter">Free Downloads</a>
        <a href="{{ routes.root_url }}#footer" class="nav-link" data-section="footer">Connect</a>
        <div class="nav-dropdown">
          <a href="#" class="nav-dropdown-toggle">Account</a>
          <div class="nav-dropdown-menu">
            <a href="{{ routes.account_login_url }}">Log In</a>
            <a href="{{ routes.account_register_url }}">Create Account</a>
          </div>
        </div>
        <a href="#" onclick="event.preventDefault(); event.stopPropagation(); openCartDrawer(); return false;">Cart</a>
      </nav>
      
      <!-- Fallback navigation for when JavaScript fails -->
      <noscript>
        <style>
          .nav-link {
            pointer-events: auto !important;
          }
        </style>
      </noscript>

    </div>

    <button class="mobile-nav-toggle" id="mobile-toggle">
      <span></span>
      <span></span>
      <span></span>
    </button>
  </div>
</header>

<!-- Minimal scroll indicator -->
<div class="scroll-indicator">
  <a href="{{ routes.root_url }}#hero" data-section="hero"></a>
  <a href="{{ routes.root_url }}#shop" data-section="shop"></a>
  <a href="{{ routes.root_url }}#about" data-section="about"></a>
  <a href="{{ routes.root_url }}#plugins" data-section="plugins"></a>
  <a href="{{ routes.root_url }}#testimonials" data-section="testimonials"></a>
  <a href="{{ routes.root_url }}#contact" data-section="contact"></a>
</div>

<script>
// Global function to initialize navigation
function initializeNavigation() {
  console.log('Initializing navigation...');
  
  const header = document.querySelector('.single-page-header');
  const toggle = document.getElementById('mobile-toggle');
  const menu = document.getElementById('nav-menu');
  const scrollIndicators = document.querySelectorAll('.scroll-indicator a');
  
  console.log('Header elements found:', {
    header: !!header,
    toggle: !!toggle,
    menu: !!menu,
    scrollIndicators: scrollIndicators.length
  });

  // Remove existing event listeners to prevent duplicates
  const existingNavLinks = document.querySelectorAll('.nav-link, .scroll-indicator a');
  existingNavLinks.forEach(link => {
    link.removeEventListener('click', handleNavClick);
  });

  // Add fresh event listeners
  const navLinks = document.querySelectorAll('.nav-link, .scroll-indicator a');
  navLinks.forEach(link => {
    link.addEventListener('click', handleNavClick);
  });
}

// Navigation click handler function
function handleNavClick(e) {
  console.log('Navigation link clicked:', this.textContent, this.href);
  
  const href = this.getAttribute('href');
  const hashIndex = href.indexOf('#');
  
  if (hashIndex !== -1) {
    const targetId = href.substring(hashIndex);
    const targetElement = document.querySelector(targetId);
    
    console.log('Hash navigation:', {
      href: href,
      targetId: targetId,
      targetElement: !!targetElement,
      currentPath: window.location.pathname
    });
    
    // Special debugging for contact section
    if (targetId === '#contact') {
      console.log('Contact section debugging:');
      console.log('- All elements with id="contact":', document.querySelectorAll('#contact'));
      console.log('- All elements with class containing "contact":', document.querySelectorAll('[class*="contact"]'));
      console.log('- Footer contact section:', document.querySelector('.footer-contact-section'));
    }

    // If we're on a different page, navigate to homepage first
    if (window.location.pathname !== '/' && window.location.pathname !== '') {
      console.log('Navigating to homepage with hash:', href);
      e.preventDefault();
      window.location.href = href;
      return;
    }

    if (targetElement) {
      console.log('Smooth scrolling to section');
      e.preventDefault();
      const header = document.querySelector('.single-page-header');
      const menu = document.getElementById('nav-menu');
      const toggle = document.getElementById('mobile-toggle');
      
      const headerHeight = header ? header.offsetHeight : 0;
      const targetPosition = targetElement.offsetTop - headerHeight;

      window.scrollTo({
        top: targetPosition,
        behavior: 'smooth'
      });

      // Close mobile menu
      if (menu) {
        menu.classList.remove('active');
      }
      if (toggle) {
        toggle.classList.remove('active');
      }
    } else {
      console.log('Target element not found, trying fallback for contact section');
      
      // Special fallback for contact section
      if (targetId === '#contact') {
        const contactFallback = document.querySelector('.footer-contact-section');
        if (contactFallback) {
          console.log('Found contact section via fallback, scrolling...');
          e.preventDefault();
          const header = document.querySelector('.single-page-header');
          const headerHeight = header ? header.offsetHeight : 0;
          const targetPosition = contactFallback.offsetTop - headerHeight;

          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
          return;
        }
      }
      
      console.log('No fallback found, allowing default navigation');
    }
  }
}

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', function() {
  console.log('Header navigation script loaded');
  initializeNavigation();
});

// Re-initialize on page navigation (for browsers that support it)
window.addEventListener('popstate', function() {
  console.log('Page navigation detected, re-initializing...');
  setTimeout(initializeNavigation, 100);
});

// Re-initialize when page becomes visible (fallback)
document.addEventListener('visibilitychange', function() {
  if (!document.hidden) {
    console.log('Page became visible, re-initializing...');
    setTimeout(initializeNavigation, 100);
  }
});

// Re-initialize periodically as a last resort
setInterval(function() {
  const navLinks = document.querySelectorAll('.nav-link');
  const hasListeners = navLinks.length > 0 && navLinks[0].onclick === null;
  if (navLinks.length > 0 && !hasListeners) {
    console.log('Navigation listeners missing, re-initializing...');
    initializeNavigation();
  }
}, 2000);

// Special function to wait for contact section and fix Connect link
function waitForContactSection() {
  const contactSection = document.querySelector('#contact');
  if (contactSection) {
    console.log('Contact section found, ensuring Connect link works...');
    const connectLink = document.querySelector('a[href*="#contact"]');
    if (connectLink) {
      console.log('Connect link found:', connectLink);
      // Force re-attach event listener
      connectLink.removeEventListener('click', handleNavClick);
      connectLink.addEventListener('click', handleNavClick);
    }
  } else {
    console.log('Contact section not found yet, retrying in 500ms...');
    setTimeout(waitForContactSection, 500);
  }
}

// Start waiting for contact section after a short delay
setTimeout(waitForContactSection, 1000);

// Force Connect link to work - override any conflicts
function forceConnectLinkWork() {
  const connectLink = document.querySelector('a[href*="#contact"]');
  if (connectLink) {
    console.log('Forcing Connect link to work...');
    
    // Remove all existing event listeners by cloning the element
    const newConnectLink = connectLink.cloneNode(true);
    connectLink.parentNode.replaceChild(newConnectLink, connectLink);
    
    // Add our event listener
    newConnectLink.addEventListener('click', function(e) {
      console.log('Connect link clicked (forced handler)');
      e.preventDefault();
      
      const contactSection = document.querySelector('#contact') || document.querySelector('.footer-contact-section');
      if (contactSection) {
        console.log('Scrolling to contact section...');
        const header = document.querySelector('.single-page-header');
        const headerHeight = header ? header.offsetHeight : 0;
        const targetPosition = contactSection.offsetTop - headerHeight;

        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
      } else {
        console.log('Contact section not found, navigating to homepage...');
        window.location.href = '{{ routes.root_url }}#contact';
      }
    });
  }
}

// Try to force Connect link to work multiple times
setTimeout(forceConnectLinkWork, 500);
setTimeout(forceConnectLinkWork, 1500);
setTimeout(forceConnectLinkWork, 3000);

// Simple test function to check Connect link
function testConnectLink() {
  console.log('=== CONNECT LINK TEST ===');
  const connectLink = document.querySelector('a[href*="#contact"]');
  const contactSection = document.querySelector('#contact');
  
  console.log('Connect link found:', !!connectLink);
  console.log('Connect link href:', connectLink ? connectLink.href : 'N/A');
  console.log('Contact section found:', !!contactSection);
  console.log('Contact section ID:', contactSection ? contactSection.id : 'N/A');
  console.log('Contact section classes:', contactSection ? contactSection.className : 'N/A');
  console.log('Contact section visible:', contactSection ? contactSection.offsetHeight > 0 : 'N/A');
  console.log('Contact section position:', contactSection ? contactSection.offsetTop : 'N/A');
  
  // Check all sections on the page
  console.log('=== ALL SECTIONS ON PAGE ===');
  const allSections = document.querySelectorAll('[id]');
  allSections.forEach(section => {
    console.log(`Section ID: ${section.id}, Classes: ${section.className}, Visible: ${section.offsetHeight > 0}`);
  });
  
  // Check specifically for footer contact
  const footerContact = document.querySelector('.footer-contact-section');
  console.log('Footer contact section found:', !!footerContact);
  if (footerContact) {
    console.log('Footer contact ID:', footerContact.id);
    console.log('Footer contact classes:', footerContact.className);
  }
  
  console.log('========================');
}

// Run test after page loads
setTimeout(testConnectLink, 2000);

// Simple, direct function for Connect link
function scrollToContact(event) {
  console.log('Connect link clicked directly!');
  event.preventDefault();
  
  // First try to find the contact section
  let contactSection = document.querySelector('#contact');
  console.log('Contact section found:', !!contactSection);
  
  if (contactSection) {
    console.log('Scrolling to contact section...');
    const header = document.querySelector('.single-page-header');
    const headerHeight = header ? header.offsetHeight : 0;
    const targetPosition = contactSection.offsetTop - headerHeight - 20;
    
    window.scrollTo({
      top: Math.max(0, targetPosition),
      behavior: 'smooth'
    });
  } else {
    console.log('Contact section not found, scrolling to bottom of page...');
    // If contact section not found, just scroll to bottom
    window.scrollTo({
      top: document.body.scrollHeight,
      behavior: 'smooth'
    });
  }
}

// Make function globally available
window.scrollToContact = scrollToContact;

// Backup function that waits for page to load
function scrollToContactDelayed() {
  console.log('Delayed Connect link attempt...');
  
  // Wait a bit for all sections to load
  setTimeout(() => {
    const contactSection = document.querySelector('#contact');
    console.log('Delayed contact section found:', !!contactSection);
    
    if (contactSection) {
      console.log('Scrolling to contact section (delayed)...');
      const header = document.querySelector('.single-page-header');
      const headerHeight = header ? header.offsetHeight : 0;
      const targetPosition = contactSection.offsetTop - headerHeight - 20;
      
      window.scrollTo({
        top: Math.max(0, targetPosition),
        behavior: 'smooth'
      });
    } else {
      console.log('Still no contact section, scrolling to bottom...');
      window.scrollTo({
        top: document.body.scrollHeight,
        behavior: 'smooth'
      });
    }
  }, 1000);
}

// Also make this available globally
window.scrollToContactDelayed = scrollToContactDelayed;

// Simple, direct function that will definitely work
function scrollToContactNow(event) {
  console.log('Connect link clicked - scrollToContactNow function called!');
  event.preventDefault();
  
  // Try to find the contact section
  let contactSection = document.querySelector('#contact');
  console.log('Contact section found:', !!contactSection);
  
  if (!contactSection) {
    // Try alternative selectors
    contactSection = document.querySelector('.footer-contact-section');
    console.log('Footer contact section found:', !!contactSection);
  }
  
  if (!contactSection) {
    // Try any element with contact in the class
    contactSection = document.querySelector('[class*="contact"]');
    console.log('Any contact element found:', !!contactSection);
  }
  
  if (contactSection) {
    console.log('Scrolling to contact section...');
    const header = document.querySelector('.single-page-header');
    const headerHeight = header ? header.offsetHeight : 0;
    const targetPosition = contactSection.offsetTop - headerHeight - 20;
    
    window.scrollTo({
      top: Math.max(0, targetPosition),
      behavior: 'smooth'
    });
  } else {
    console.log('No contact section found, scrolling to bottom of page...');
    // Just scroll to the bottom of the page
    window.scrollTo({
      top: document.body.scrollHeight,
      behavior: 'smooth'
    });
  }
}

// Make it globally available
window.scrollToContactNow = scrollToContactNow;

// Initialize scroll effects
function initializeScrollEffects() {
  const header = document.querySelector('.single-page-header');
  let lastScrollY = window.scrollY;
  let ticking = false;

  // Scroll effect with hide/show functionality
  function updateHeader() {
    const scrollY = window.scrollY;
    
    if (scrollY > 50) {
      header.classList.add('scrolled');
    } else {
      header.classList.remove('scrolled');
    }

    // Hide header when scrolling down, show when scrolling up
    if (scrollY > lastScrollY && scrollY > 100) {
      header.style.transform = 'translateY(-100%)';
    } else {
      header.style.transform = 'translateY(0)';
    }
    
    lastScrollY = scrollY;
    ticking = false;
  }

  window.addEventListener('scroll', function() {
    if (!ticking) {
      requestAnimationFrame(updateHeader);
      ticking = true;
    }
    
    // Update scroll indicators
    updateScrollIndicators();
  });

  // Update scroll indicators based on current section
  function updateScrollIndicators() {
    const sections = ['hero', 'shop', 'about', 'plugins', 'testimonials', 'contact'];
    const scrollPos = window.scrollY + 200;

    sections.forEach(section => {
      const element = document.getElementById(section);
      const indicator = document.querySelector(`[data-section="${section}"]`);
      
      if (element && indicator) {
        const rect = element.getBoundingClientRect();
        const isVisible = rect.top <= scrollPos && rect.bottom >= scrollPos;
        
        indicator.classList.toggle('active', isVisible);
      }
    });
  }

// Initialize mobile menu
function initializeMobileMenu() {
  const toggle = document.getElementById('mobile-toggle');
  const menu = document.getElementById('nav-menu');
  
  if (toggle && menu) {
    // Remove existing listeners
    toggle.removeEventListener('click', handleMobileToggle);
    // Add fresh listener
    toggle.addEventListener('click', handleMobileToggle);
  }
}

function handleMobileToggle() {
  const menu = document.getElementById('nav-menu');
  const toggle = document.getElementById('mobile-toggle');
  
  if (menu && toggle) {
    menu.classList.toggle('active');
    toggle.classList.toggle('active');
  }
}

  // Initialize scroll indicators
  updateScrollIndicators();

  // Update cart count
  function updateCartCount() {
    fetch('/cart.js')
      .then(response => response.json())
      .then(cart => {
        const cartCount = document.getElementById('cart-count');
        if (cartCount) {
          cartCount.textContent = cart.item_count;
          cartCount.style.display = cart.item_count > 0 ? 'flex' : 'none';
        }
      })
      .catch(error => console.log('Cart count update failed:', error));
  }

  // Update cart count on page load
  updateCartCount();

  // Listen for cart updates
  document.addEventListener('cart:updated', updateCartCount);
});
</script>

{% schema %}
{
  "name": "Header",
  "class": "section-header",
  "settings": [
    {
      "type": "select",
      "id": "menu_type_desktop",
      "options": [
        {
          "value": "dropdown",
          "label": "Dropdown"
        },
        {
          "value": "mega",
          "label": "Mega menu"
        },
        {
          "value": "drawer",
          "label": "Drawer"
        }
      ],
      "default": "dropdown",
      "label": "Menu type"
    }
  ]
}
{% endschema %}

<!-- Enhanced Cart Drawer -->
{%- render 'enhanced-cart-drawer' -%}
